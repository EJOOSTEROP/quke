[tool.poetry]
name = "quke"
version = "0.2.1"
description = "Compare the answering capabilities of different LLMs - for example LlaMa, ChatGPT, Cohere, Falcon - against user provided document(s) and questions."
authors = ["Erik Oosterop"]
maintainers = ["Erik Oosterop"]
license = "MIT"
readme = "README.md"
homepage = ""
repository = "https://github.com/EJOOSTEROP/quke"
documentation = ""
keywords = ["ML", "LLM", "compare", "chat", "semantic search"]


[tool.poetry.scripts]
quke = "quke.quke:quke"

[tool.poetry.dependencies]
python = "^3.11"
langchain = "^0.0.229"
hydra-core = "^1.3.2"
python-dotenv = "^1.0.0"
pymupdf = "^1.22.5"
yt-dlp = "^2023.7.6"
pydub = "^0.25.1"
ffmpeg = "^1.4"
pypdf = "^3.12.1"
bs4 = "^0.0.1"
tiktoken = "^0.4.0"
chromadb = "^0.3.29"
lark = "^1.1.7"
huggingface-hub = "^0.16.4"
openai = "^0.27.8"
cohere = "^4.17.0"
replicate = "^0.9.0"
mdutils = "^1.6.0"
rich = "^13.5.2"

[tool.poetry.group.dev.dependencies]
pytest-cov = "^4.1.0"
pytest = "^7.4.0"
requests-mock = "^1.11.0"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
markers = [
    "expensive: uses API key and likely paid or at least limited resources (deselect with '-m \"not expensive\"')",
    "serial",
]

[tool.ruff]
include = ["*.py", "*.pyi", "**/pyproject.toml"]
line-length = 119
select = [  # https://beta.ruff.rs/docs/rules/
    "A",  # prevent using keywords that clobber python builtins
    "ANN",  # type annotation
    "ARG",  # unused arguments
    "B",  # bugbear: security warnings
    # "BLE",  # blind exceptions
    "C",
    # "COM",  # commas
    "C4",  # comprehension
    "C90",  # McCabe complexity
    "D",  # pydocstyle
    # "DAR", # darglint, but does not seem to be implemented at the moment
    "DTZ",  # date timezone
    "E",  # pycodestyle
    "EM",  # error messages
    "ERA",  # eradicate
    "EXE",  # executables
    "F",  # pyflakes
    "FLY",  # f-strings
    # "G",  # logging format (no f-string)
    "I",  # isort
    "ICN",  # import conventions
    "INT",  # gettext
    "ISC",  # implicit string concatenation
    "N",  # pep8 naming
    "PERF",  # performance lint
    "PIE",  #
    "PT",  # pytest style
    "PTH",  # use pathlib
    "Q",  # quotes
    "RET",  # return values
    "RSE",  # error parenthesis
    "RUF",  # ruff rules
    "S",  # Bandit
    "SIM",  # simplify
    "TCH",  # type checking
    # "TD",  # TODO
    "TID",  # tidy imports
    "TRY",  # tryceratops
    "T20",  # print statement
    "UP",  # alert you when better syntax is available in your python version
    "W",  # pycodestyle warnings
    "RUF",  # the ruff developer's own rules
]

ignore = [
    "E203",  # comments allowed
    "E501",
    "ANN101", # type annotation for self
]

# fixing is off by default
fix = true
fixable = [
    "F401",  # Remove unused imports.
    "NPY001",  # Fix numpy types, which are removed in 1.24.
    "RUF100",  # Remove unused noqa comments.
    "I",  # Fix import order
    "PTH",  # Path.cwd()
]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = [
    # at least these three should be fine in tests:
    "S101", # asserts allowed in tests...
    "ANN",  # TODO: do not care about type annotations in tests for now
    "ARG", # Unused function args -> fixtures nevertheless are functionally relevant...
    "FBT", # Don't care about booleans as positional arguments in tests, e.g. via @pytest.mark.parametrize()
    # The below are debateable
    "PLR2004", # Magic value used in comparison, ...
    "S311", # Standard pseudo-random generators are not suitable for cryptographic purposes
    "D",  # no pydocstyle
    "N",  # Argument, function to lowercase
]

"noxfile.py" = [
    "ANN",
    "D",
]

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
disallow_incomplete_defs = true
